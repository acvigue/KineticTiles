C51 COMPILER V9.60.0.0   INITDEVICE                                                        08/09/2020 12:16:23 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\acvig\S
                    -implicityStudio\v4_workspace\EFM8BB10F4G-A-QFN20\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(
                    -2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\acvig\SimplicityStudio\v4_workspace\EFM8
                    -BB10F4G-A-QFN20\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/shared/si8051Base;C:/SiliconLa
                    -bs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8BB1/inc) REGFILE(EFM8BB10F4G-A-QFN20.ORC) PRINT(.\src\Init
                    -Device.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              WDT_0_enter_DefaultMode_from_RESET();
  25   1              PORTS_0_enter_DefaultMode_from_RESET();
  26   1              PORTS_1_enter_DefaultMode_from_RESET();
  27   1              PBCFG_0_enter_DefaultMode_from_RESET();
  28   1              CLOCK_0_enter_DefaultMode_from_RESET();
  29   1              TIMER16_2_enter_DefaultMode_from_RESET();
  30   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  31   1              UART_0_enter_DefaultMode_from_RESET();
  32   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  33   1              // [Config Calls]$
  34   1      
  35   1      }
  36          
  37          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  38   1              // $[P0 - Port 0 Pin Latch]
  39   1              // [P0 - Port 0 Pin Latch]$
  40   1      
  41   1              // $[P0MDOUT - Port 0 Output Mode]
  42   1              /***********************************************************************
  43   1               - P0.0 output is open-drain
  44   1               - P0.1 output is open-drain
  45   1               - P0.2 output is open-drain
  46   1               - P0.3 output is open-drain
  47   1               - P0.4 output is push-pull
  48   1               - P0.5 output is open-drain
  49   1               - P0.6 output is open-drain
  50   1               - P0.7 output is open-drain
  51   1               ***********************************************************************/
C51 COMPILER V9.60.0.0   INITDEVICE                                                        08/09/2020 12:16:23 PAGE 2   

  52   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
  53   1                              | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
  54   1                              | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__OPEN_DRAIN
  55   1                              | P0MDOUT_B6__OPEN_DRAIN | P0MDOUT_B7__OPEN_DRAIN;
  56   1              // [P0MDOUT - Port 0 Output Mode]$
  57   1      
  58   1              // $[P0MDIN - Port 0 Input Mode]
  59   1              // [P0MDIN - Port 0 Input Mode]$
  60   1      
  61   1              // $[P0SKIP - Port 0 Skip]
  62   1              // [P0SKIP - Port 0 Skip]$
  63   1      
  64   1              // $[P0MASK - Port 0 Mask]
  65   1              // [P0MASK - Port 0 Mask]$
  66   1      
  67   1              // $[P0MAT - Port 0 Match]
  68   1              // [P0MAT - Port 0 Match]$
  69   1      
  70   1      }
  71          
  72          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
  73   1              // $[P1 - Port 1 Pin Latch]
  74   1              // [P1 - Port 1 Pin Latch]$
  75   1      
  76   1              // $[P1MDOUT - Port 1 Output Mode]
  77   1              /***********************************************************************
  78   1               - P1.0 output is push-pull
  79   1               - P1.1 output is open-drain
  80   1               - P1.2 output is open-drain
  81   1               - P1.3 output is open-drain
  82   1               - P1.4 output is open-drain
  83   1               - P1.5 output is open-drain
  84   1               - P1.6 output is open-drain
  85   1               ***********************************************************************/
  86   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__OPEN_DRAIN
  87   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
  88   1                              | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__OPEN_DRAIN
  89   1                              | P1MDOUT_B6__OPEN_DRAIN;
  90   1              // [P1MDOUT - Port 1 Output Mode]$
  91   1      
  92   1              // $[P1MDIN - Port 1 Input Mode]
  93   1              // [P1MDIN - Port 1 Input Mode]$
  94   1      
  95   1              // $[P1SKIP - Port 1 Skip]
  96   1              // [P1SKIP - Port 1 Skip]$
  97   1      
  98   1              // $[P1MASK - Port 1 Mask]
  99   1              // [P1MASK - Port 1 Mask]$
 100   1      
 101   1              // $[P1MAT - Port 1 Match]
 102   1              // [P1MAT - Port 1 Match]$
 103   1      
 104   1      }
 105          
 106          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 107   1              // $[XBR2 - Port I/O Crossbar 2]
 108   1              /***********************************************************************
 109   1               - Weak Pullups enabled 
 110   1               - Crossbar enabled
 111   1               ***********************************************************************/
 112   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 113   1              // [XBR2 - Port I/O Crossbar 2]$
 114   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        08/09/2020 12:16:23 PAGE 3   

 115   1              // $[PRTDRV - Port Drive Strength]
 116   1              // [PRTDRV - Port Drive Strength]$
 117   1      
 118   1              // $[XBR0 - Port I/O Crossbar 0]
 119   1              /***********************************************************************
 120   1               - UART TX, RX routed to Port pins P0.4 and P0.5
 121   1               - SPI I/O unavailable at Port pins
 122   1               - SMBus 0 I/O unavailable at Port pins
 123   1               - CP0 unavailable at Port pin
 124   1               - Asynchronous CP0 unavailable at Port pin
 125   1               - CP1 unavailable at Port pin
 126   1               - Asynchronous CP1 unavailable at Port pin
 127   1               - SYSCLK unavailable at Port pin
 128   1               ***********************************************************************/
 129   1              XBR0 = XBR0_URT0E__ENABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__DISABLED
 130   1                              | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 131   1                              | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 132   1              // [XBR0 - Port I/O Crossbar 0]$
 133   1      
 134   1              // $[XBR1 - Port I/O Crossbar 1]
 135   1              // [XBR1 - Port I/O Crossbar 1]$
 136   1      
 137   1      }
 138          
 139          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
 140   1              // $[Watchdog Timer Init Variable Declarations]
 141   1              uint32_t i;
 142   1              bool ea;
 143   1              // [Watchdog Timer Init Variable Declarations]$
 144   1      
 145   1              // $[WDTCN - Watchdog Timer Control]
 146   1              // Deprecated
 147   1              // [WDTCN - Watchdog Timer Control]$
 148   1      
 149   1              // $[WDTCN_2 - Watchdog Timer Control]
 150   1      
 151   1              // Feed WDT timer before disabling (Erratum WDT_E102)
 152   1              WDTCN = 0xA5;
 153   1      
 154   1              // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
 155   1              for (i = 0; i < (2 * 3062500UL) / (10000 * 3); i++) {
 156   2                      NOP();
 157   2              }
 158   1      
 159   1              // Disable WDT
 160   1              ea = IE_EA;
 161   1              IE_EA = 0;
 162   1              WDTCN = 0xDE;
 163   1              WDTCN = 0xAD;
 164   1              IE_EA = ea;
 165   1      
 166   1              // [WDTCN_2 - Watchdog Timer Control]$
 167   1      
 168   1      }
 169          
 170          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 171   1              // $[CLKSEL - Clock Select]
 172   1              /***********************************************************************
 173   1               - Clock derived from the Internal High-Frequency Oscillator
 174   1               - SYSCLK is equal to selected clock source divided by 1
 175   1               ***********************************************************************/
 176   1              CLKSEL = CLKSEL_CLKSL__HFOSC | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 177   1              // [CLKSEL - Clock Select]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        08/09/2020 12:16:23 PAGE 4   

 178   1      
 179   1      }
 180          
 181          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 182   1              // $[Timer Initialization]
 183   1              // Save Timer Configuration
 184   1              uint8_t TMR2CN0_TR2_save;
 185   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 186   1              // Stop Timer
 187   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 188   1              // [Timer Initialization]$
 189   1      
 190   1              // $[TMR2CN0 - Timer 2 Control]
 191   1              // [TMR2CN0 - Timer 2 Control]$
 192   1      
 193   1              // $[TMR2H - Timer 2 High Byte]
 194   1              /***********************************************************************
 195   1               - Timer 2 High Byte = 0xFF
 196   1               ***********************************************************************/
 197   1              TMR2H = (0xFF << TMR2H_TMR2H__SHIFT);
 198   1              // [TMR2H - Timer 2 High Byte]$
 199   1      
 200   1              // $[TMR2L - Timer 2 Low Byte]
 201   1              /***********************************************************************
 202   1               - Timer 2 Low Byte = 0xFE
 203   1               ***********************************************************************/
 204   1              TMR2L = (0xFE << TMR2L_TMR2L__SHIFT);
 205   1              // [TMR2L - Timer 2 Low Byte]$
 206   1      
 207   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 208   1              /***********************************************************************
 209   1               - Timer 2 Reload High Byte = 0xFF
 210   1               ***********************************************************************/
 211   1              TMR2RLH = (0xFF << TMR2RLH_TMR2RLH__SHIFT);
 212   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 213   1      
 214   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 215   1              /***********************************************************************
 216   1               - Timer 2 Reload Low Byte = 0xFF
 217   1               ***********************************************************************/
 218   1              TMR2RLL = (0xFF << TMR2RLL_TMR2RLL__SHIFT);
 219   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 220   1      
 221   1              // $[TMR2CN0]
 222   1              // [TMR2CN0]$
 223   1      
 224   1              // $[Timer Restoration]
 225   1              // Restore Timer Configuration
 226   1              TMR2CN0 |= TMR2CN0_TR2_save;
 227   1              // [Timer Restoration]$
 228   1      
 229   1      }
 230          
 231          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 232   1              // $[CKCON0 - Clock Control 0]
 233   1              /***********************************************************************
 234   1               - System clock divided by 4
 235   1               - Counter/Timer 0 uses the system clock
 236   1               - Timer 2 high byte uses the system clock
 237   1               - Timer 2 low byte uses the system clock
 238   1               - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 239   1               - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 240   1               - Timer 1 uses the system clock
C51 COMPILER V9.60.0.0   INITDEVICE                                                        08/09/2020 12:16:23 PAGE 5   

 241   1               ***********************************************************************/
 242   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__SYSCLK | CKCON0_T2MH__SYSCLK
 243   1                              | CKCON0_T2ML__SYSCLK | CKCON0_T3MH__EXTERNAL_CLOCK
 244   1                              | CKCON0_T3ML__EXTERNAL_CLOCK | CKCON0_T1M__SYSCLK;
 245   1              // [CKCON0 - Clock Control 0]$
 246   1      
 247   1              // $[TMOD - Timer 0/1 Mode]
 248   1              /***********************************************************************
 249   1               - Mode 0, 13-bit Counter/Timer
 250   1               - Mode 2, 8-bit Counter/Timer with Auto-Reload
 251   1               - Timer Mode
 252   1               - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 253   1               - Timer Mode
 254   1               - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 255   1               ***********************************************************************/
 256   1              TMOD = TMOD_T0M__MODE0 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 257   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 258   1              // [TMOD - Timer 0/1 Mode]$
 259   1      
 260   1              // $[TCON - Timer 0/1 Control]
 261   1              /***********************************************************************
 262   1               - Start Timer 1 running
 263   1               ***********************************************************************/
 264   1              TCON |= TCON_TR1__RUN;
 265   1              // [TCON - Timer 0/1 Control]$
 266   1      
 267   1      }
 268          
 269          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 270   1              // $[EIE1 - Extended Interrupt Enable 1]
 271   1              // [EIE1 - Extended Interrupt Enable 1]$
 272   1      
 273   1              // $[EIP1 - Extended Interrupt Priority 1]
 274   1              // [EIP1 - Extended Interrupt Priority 1]$
 275   1      
 276   1              // $[IE - Interrupt Enable]
 277   1              /***********************************************************************
 278   1               - Enable each interrupt according to its individual mask setting
 279   1               - Disable external interrupt 0
 280   1               - Disable external interrupt 1
 281   1               - Disable all SPI0 interrupts
 282   1               - Disable all Timer 0 interrupt
 283   1               - Disable all Timer 1 interrupt
 284   1               - Disable Timer 2 interrupt
 285   1               - Enable UART0 interrupt
 286   1               ***********************************************************************/
 287   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 288   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 289   1                              | IE_ET2__DISABLED | IE_ES0__ENABLED;
 290   1              // [IE - Interrupt Enable]$
 291   1      
 292   1              // $[IP - Interrupt Priority]
 293   1              // [IP - Interrupt Priority]$
 294   1      
 295   1      }
 296          
 297          extern void UART_0_enter_DefaultMode_from_RESET(void) {
 298   1              // $[SCON0 - UART0 Serial Port Control]
 299   1              /***********************************************************************
 300   1               - UART0 reception enabled
 301   1               ***********************************************************************/
 302   1              SCON0 |= SCON0_REN__RECEIVE_ENABLED;
 303   1              // [SCON0 - UART0 Serial Port Control]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        08/09/2020 12:16:23 PAGE 6   

 304   1      
 305   1      }
 306          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    159    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
